import { useEffect, useRef } from 'react';\n\ninterface SwipeHandlers {\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  onSwipeUp?: () => void;\n  onSwipeDown?: () => void;\n}\n\ninterface SwipeConfig {\n  minSwipeDistance?: number;\n  preventDefaultTouchmoveEvent?: boolean;\n  trackMouse?: boolean;\n}\n\ninterface TouchPosition {\n  x: number;\n  y: number;\n  time: number;\n}\n\nexport const useSwipeGestures = (\n  handlers: SwipeHandlers,\n  config: SwipeConfig = {}\n) => {\n  const {\n    minSwipeDistance = 50,\n    preventDefaultTouchmoveEvent = false,\n    trackMouse = false,\n  } = config;\n\n  const startPos = useRef<TouchPosition | null>(null);\n  const endPos = useRef<TouchPosition | null>(null);\n\n  const handleTouchStart = (e: TouchEvent) => {\n    const touch = e.touches[0];\n    startPos.current = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n    };\n  };\n\n  const handleTouchMove = (e: TouchEvent) => {\n    if (preventDefaultTouchmoveEvent) {\n      e.preventDefault();\n    }\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    if (!startPos.current) return;\n\n    const touch = e.changedTouches[0];\n    endPos.current = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n    };\n\n    const deltaX = endPos.current.x - startPos.current.x;\n    const deltaY = endPos.current.y - startPos.current.y;\n    const deltaTime = endPos.current.time - startPos.current.time;\n\n    // Ignore if swipe took too long (> 300ms)\n    if (deltaTime > 300) {\n      startPos.current = null;\n      endPos.current = null;\n      return;\n    }\n\n    const absX = Math.abs(deltaX);\n    const absY = Math.abs(deltaY);\n\n    // Determine swipe direction\n    if (absX >= minSwipeDistance || absY >= minSwipeDistance) {\n      if (absX > absY) {\n        // Horizontal swipe\n        if (deltaX > 0) {\n          handlers.onSwipeRight?.();\n        } else {\n          handlers.onSwipeLeft?.();\n        }\n      } else {\n        // Vertical swipe\n        if (deltaY > 0) {\n          handlers.onSwipeDown?.();\n        } else {\n          handlers.onSwipeUp?.();\n        }\n      }\n    }\n\n    startPos.current = null;\n    endPos.current = null;\n  };\n\n  // Mouse event handlers for desktop testing\n  const handleMouseDown = (e: MouseEvent) => {\n    if (!trackMouse) return;\n    startPos.current = {\n      x: e.clientX,\n      y: e.clientY,\n      time: Date.now(),\n    };\n  };\n\n  const handleMouseUp = (e: MouseEvent) => {\n    if (!trackMouse || !startPos.current) return;\n\n    endPos.current = {\n      x: e.clientX,\n      y: e.clientY,\n      time: Date.now(),\n    };\n\n    const deltaX = endPos.current.x - startPos.current.x;\n    const deltaY = endPos.current.y - startPos.current.y;\n    const deltaTime = endPos.current.time - startPos.current.time;\n\n    if (deltaTime > 300) {\n      startPos.current = null;\n      endPos.current = null;\n      return;\n    }\n\n    const absX = Math.abs(deltaX);\n    const absY = Math.abs(deltaY);\n\n    if (absX >= minSwipeDistance || absY >= minSwipeDistance) {\n      if (absX > absY) {\n        if (deltaX > 0) {\n          handlers.onSwipeRight?.();\n        } else {\n          handlers.onSwipeLeft?.();\n        }\n      } else {\n        if (deltaY > 0) {\n          handlers.onSwipeDown?.();\n        } else {\n          handlers.onSwipeUp?.();\n        }\n      }\n    }\n\n    startPos.current = null;\n    endPos.current = null;\n  };\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleTouchStart, { passive: true });\n    document.addEventListener('touchmove', handleTouchMove, { passive: !preventDefaultTouchmoveEvent });\n    document.addEventListener('touchend', handleTouchEnd, { passive: true });\n\n    if (trackMouse) {\n      document.addEventListener('mousedown', handleMouseDown);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('touchstart', handleTouchStart);\n      document.removeEventListener('touchmove', handleTouchMove);\n      document.removeEventListener('touchend', handleTouchEnd);\n\n      if (trackMouse) {\n        document.removeEventListener('mousedown', handleMouseDown);\n        document.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handlers, minSwipeDistance, preventDefaultTouchmoveEvent, trackMouse]);\n\n  return {\n    startPos: startPos.current,\n    endPos: endPos.current,\n  };\n};\n\nexport default useSwipeGestures;"
